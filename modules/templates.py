# modules/templates.py

def build_prebuilt_links_message(categories):
    message = "üîó *Amazon Prebuilt Category Pages*\n\n"
    for cat in categories:
        message += f"üì¢ *{escape_markdown(cat['category'])}*\nüîó [View Deals]({escape_markdown(cat['url'])})\n\n"
    return message.strip()





def build_hidden_gem_message(category_name, products):
    if not products:
        return None

    message = f"üì¢ üíé *HIDDEN GEM: {category_name.upper()} DEALS*\n\n"
    for i, product in enumerate(products):
        label = "üî• Hot Deal" if i == 0 else "‚≠ê Top Pick"
        title = escape_markdown(product['title'])
        price = escape_markdown(product['price'])
        rating = escape_markdown(product['rating'])
        link = escape_markdown(product['link'])
        message += f"""{label}
        üõí *{title}*
        üí∞ {price}
        ‚≠ê {rating}
        üîó [View on Amazon]({link})

"""
    return message.strip()






def build_budget_picks_message(products):
    from modules.utils import apply_affiliate_tag, shorten_url

    header = "üí∏ *Top Budget Picks (Under ‚Çπ999)*\n"
    body = ""
    for p in products:
        title = escape_markdown(p["title"])
        price = p.get("price", "N/A")
        rating = escape_markdown(p.get("rating", ""))
        url = shorten_url(apply_affiliate_tag(p.get("url", "#")))

        body += f"\n[{title}]({url})\nüí∞ ‚Çπ{price}   ‚≠ê {rating}\n"
    return header + body.strip()







def build_flash_deals_message(deals):
    message = "‚ö° *FLASH DEALS ALERT!*\n\n"
    for deal in deals:
        title = escape_markdown(deal['title'])
        url = escape_markdown(deal['url'])
        message += f"{title}\nüîó [View Deal]({url})\n\n"
    return message.strip()







import re

def truncate(text, limit=100):
    text = text.strip()
    return text[:limit].rsplit(' ', 1)[0] + "..." if len(text) > limit else text

import re
from modules.utils import apply_affiliate_tag, shorten_url

def escape_markdown(text: str) -> str:
    """
    Escapes special characters in text for Markdown V2.
    """
    return re.sub(r'([_*\[\]()~`>#+-=|{}.!])', r'\\\1', text)

def build_combo_message(label, products):
    if not products:
        return None, None

    product = max(
        products,
        key=lambda p: int(p.get("discount_percent", "0").replace("%", "").strip())
    )

    title = escape_markdown(product["title"])
    original_price = product["original_price"]
    discounted_price = product["discounted_price"]
    discount_percent = product["discount_percent"]
    image_url = product["image"]
    product_url = shorten_url(apply_affiliate_tag(product["url"]))

    header = f"üéØ *{escape_markdown(label)} Combo Deal* üéØ"
    price_info = f"*Price:* ~~‚Çπ{original_price}~~ ‚Üí *‚Çπ{discounted_price}* (`{discount_percent}`)"
    footer = f"[üõí Grab Now]({product_url})"

    caption = f"{header}\n\n*{title}*\n\n{price_info}\n\n{footer}"
    return image_url, caption
















def build_product_of_day_message(product):
    from modules.utils import apply_affiliate_tag, shorten_url

    title = escape_markdown(product.get("title", "No title"))
    original_price = product.get("original_price", "")
    discounted_price = product.get("price", "N/A")
    discount_percent = product.get("discount_percent", "")
    rating = escape_markdown(product.get("rating", "‚≠ê N/A"))
    image = product.get("image", None)
    url = shorten_url(apply_affiliate_tag(product.get("url", "#")))

    caption = f"üîç *Product of the Day*\n\n"
    caption += f"*{title}*\n"

    if original_price and original_price != discounted_price:
        caption += f"üí∞ ~~‚Çπ{original_price}~~ ‚Üí *‚Çπ{discounted_price}* `{discount_percent}`\n"
    else:
        caption += f"üí∞ *‚Çπ{discounted_price}*\n"

    caption += f"‚≠ê {rating}\n[üîó View on Amazon]({url})"

    return caption.strip(), caption.strip(), image






def format_product_message(product, label, show_affiliate=True):
    title = product.get("title", "")
    price = product.get("price", "")
    rating = product.get("rating", "")
    link = product.get("affiliate_link", product.get("url", ""))

    message = f"""{escape_markdown(label)} *{escape_markdown(title)}*\nüí∞ Price: ‚Çπ{escape_markdown(price)}\n‚≠ê Rating: {escape_markdown(rating)}\nüîó [View on Amazon]({escape_markdown(link)})"""

    return message

def build_category_header(category: str) -> str:
    return f"\nüì¢ *{category.upper()} DEALS*\n"

def build_morning_intro(label: str) -> str:
    return f"üåÖ *Good Morning!* Here's your {label} for today:\n"

def build_evening_intro(label: str) -> str:
    return f"üåÜ *Evening Deals:* {label} just dropped! Don't miss out:\n"

def build_product_message(product: dict) -> str:
    title = escape_markdown(product.get("title", "No title"))
    price = product.get("price", "N/A")
    rating = escape_markdown(product.get("rating", "‚≠ê N/A"))
    url = product.get("url", "")
    label = product.get("label", "")

    # Add warning emoji if URL is missing
    if not url:
        url_display = "‚ùå URL Missing"
    else:
        url_display = f"üîó [View on Amazon]({url})"

    return (
        f"üõçÔ∏è *{title}*\n"
        f"üí∞ {price}   ‚≠ê {rating}\n"
        f"{url_display}\n"
        f"{label}".strip()
    )




def format_top_5_product_message_markdown(product, index):
    label = "üî• Hot Deal" if index == 0 else (
        "üí∏ Premium Pick" if index == 1 else "‚≠ê Top Rated"
    )

    title = escape_markdown(product.get("title", "No title"))
    price = product.get("price", "N/A")
    original_price = product.get("original_price", "")
    discount_percent = product.get("discount_percent", "")
    rating = escape_markdown(product.get("rating", ""))
    url = product.get("url", "#")

    message = f"*{label}*\n"
    message += f"*{title}*\n"

    if original_price and original_price != price:
        message += f"üí∞ ~~‚Çπ{original_price}~~ ‚Üí *‚Çπ{price}* `{discount_percent}`\n"
    else:
        message += f"üí∞ *‚Çπ{price}*\n"

    message += f"‚≠ê {rating}\n[üîó View Deal]({url})\n"
    return message.strip()




def format_markdown_caption(product: dict) -> str:
    from modules.utils import apply_affiliate_tag, shorten_url

    title = escape_markdown(product["title"])
    price = product.get("price", "N/A")
    original_price = product.get("original_price", "")
    discount_percent = product.get("discount_percent", "")
    rating = product.get("rating", "")
    reviews = product.get("reviews", "")
    label = escape_markdown(product.get("label", ""))
    url = shorten_url(apply_affiliate_tag(product["url"]))

    caption = f"{label} *{title}*\n"
    if original_price and original_price != price:
        caption += f"üí∞ ~~‚Çπ{original_price}~~ ‚Üí *‚Çπ{price}* `{discount_percent}`\n"
    else:
        caption += f"üí∞ *‚Çπ{price}*\n"
    caption += f"‚≠ê {rating} ({reviews} reviews)\n"
    caption += f"[üîó View on Amazon]({url})"
    return caption.strip()



